#!/usr/bin/env python3
"""
Setup script for Telegram Translator Bot
Easy installation and configuration tool
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

# Colors for terminal output
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'
    BOLD = '\033[1m'

def print_banner():
    """Print welcome banner"""
    banner = f"""
{Colors.BLUE}╔══════════════════════════════════════════════════════╗
║     🌐 TELEGRAM TRANSLATOR BOT SETUP WIZARD 🌐       ║
║           Easy Installation & Configuration           ║
╚══════════════════════════════════════════════════════╝{Colors.END}
    """
    print(banner)

def check_python_version():
    """Check if Python version is 3.8+"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"{Colors.RED}❌ Python 3.8+ is required. You have {version.major}.{version.minor}{Colors.END}")
        sys.exit(1)
    print(f"{Colors.GREEN}✅ Python {version.major}.{version.minor} detected{Colors.END}")

def install_dependencies():
    """Install required packages"""
    print(f"\n{Colors.YELLOW}📦 Installing dependencies...{Colors.END}")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print(f"{Colors.GREEN}✅ Dependencies installed successfully{Colors.END}")
    except subprocess.CalledProcessError:
        print(f"{Colors.RED}❌ Failed to install dependencies{Colors.END}")
        sys.exit(1)

def setup_environment():
    """Setup .env file with user input"""
    print(f"\n{Colors.YELLOW}⚙️ Setting up environment configuration...{Colors.END}")
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    # Check if .env already exists
    if env_file.exists():
        response = input(f"{Colors.YELLOW}⚠️  .env file already exists. Overwrite? (y/N): {Colors.END}")
        if response.lower() != 'y':
            print("Keeping existing .env file")
            return
    
    # Copy example file
    if env_example.exists():
        shutil.copy(env_example, env_file)
        print(f"{Colors.GREEN}✅ Created .env file from template{Colors.END}")
    else:
        # Create new .env file
        with open(env_file, 'w') as f:
            f.write("# Telegram Translator Bot Configuration\n\n")
    
    print(f"\n{Colors.BOLD}Let's configure your bot:{Colors.END}")
    
    # Get Telegram token
    print(f"\n{Colors.BLUE}Step 1: Telegram Bot Token{Colors.END}")
    print("1. Open Telegram and search for @BotFather")
    print("2. Send /newbot and follow instructions")
    print("3. Copy the bot token")
    telegram_token = input(f"{Colors.YELLOW}Enter your Telegram Bot Token: {Colors.END}").strip()
    
    # Get Z.AI API key
    print(f"\n{Colors.BLUE}Step 2: Z.AI API Key{Colors.END}")
    print("1. Visit https://z.ai")
    print("2. Sign up or log in")
    print("3. Go to Dashboard → API Keys")
    print("4. Create and copy your API key")
    zai_api_key = input(f"{Colors.YELLOW}Enter your Z.AI API Key: {Colors.END}").strip()
    
    # Optional configurations
    print(f"\n{Colors.BLUE}Step 3: Optional Settings (press Enter for defaults){Colors.END}")
    max_length = input("Max message length (default 4000): ").strip() or "4000"
    default_lang = input("Default language (default 'vi' for Vietnamese): ").strip() or "vi"
    enable_stats = input("Enable statistics? (Y/n): ").strip().lower() != 'n'
    
    # Write configuration
    config_content = f"""# Telegram Translator Bot Configuration
# Generated by setup.py

# Required Settings
TELEGRAM_TOKEN={telegram_token}
ZAI_API_KEY={zai_api_key}

# Optional Settings
MAX_MESSAGE_LENGTH={max_length}
DEFAULT_LANGUAGE={default_lang}
ENABLE_STATS={'true' if enable_stats else 'false'}
LOG_LEVEL=INFO
"""
    
    with open(env_file, 'w') as f:
        f.write(config_content)
    
    print(f"{Colors.GREEN}✅ Configuration saved to .env{Colors.END}")

def test_configuration():
    """Test if configuration is valid"""
    print(f"\n{Colors.YELLOW}🔍 Testing configuration...{Colors.END}")
    
    from dotenv import load_dotenv
    load_dotenv()
    
    telegram_token = os.getenv('TELEGRAM_TOKEN')
    zai_api_key = os.getenv('ZAI_API_KEY')
    
    errors = []
    if not telegram_token:
        errors.append("Telegram token not found")
    if not zai_api_key:
        errors.append("Z.AI API key not found")
    
    if errors:
        print(f"{Colors.RED}❌ Configuration errors:{Colors.END}")
        for error in errors:
            print(f"  - {error}")
        return False
    
    print(f"{Colors.GREEN}✅ Configuration looks good!{Colors.END}")
    return True

def create_start_script():
    """Create convenient start script"""
    print(f"\n{Colors.YELLOW}📝 Creating start script...{Colors.END}")
    
    if sys.platform == "win32":
        # Windows batch file
        with open("start_bot.bat", "w") as f:
            f.write("@echo off\n")
            f.write("python telegram_translator_bot.py\n")
            f.write("pause\n")
        print(f"{Colors.GREEN}✅ Created start_bot.bat{Colors.END}")
    else:
        # Unix shell script
        with open("start_bot.sh", "w") as f:
            f.write("#!/bin/bash\n")
            f.write("python3 telegram_translator_bot.py\n")
        os.chmod("start_bot.sh", 0o755)
        print(f"{Colors.GREEN}✅ Created start_bot.sh{Colors.END}")

def main():
    """Main setup function"""
    print_banner()
    
    print(f"{Colors.BOLD}Starting setup process...{Colors.END}\n")
    
    # Step 1: Check Python version
    check_python_version()
    
    # Step 2: Install dependencies
    install_dependencies()
    
    # Step 3: Setup environment
    setup_environment()
    
    # Step 4: Test configuration
    if not test_configuration():
        print(f"\n{Colors.RED}Please fix the configuration errors and run setup again.{Colors.END}")
        sys.exit(1)
    
    # Step 5: Create start script
    create_start_script()
    
    # Success message
    print(f"\n{Colors.GREEN}{'=' * 50}")
    print(f"🎉 Setup completed successfully!")
    print(f"{'=' * 50}{Colors.END}")
    
    print(f"\n{Colors.BOLD}To start your bot:{Colors.END}")
    if sys.platform == "win32":
        print(f"  1. Double-click start_bot.bat")
        print(f"  2. Or run: python telegram_translator_bot.py")
    else:
        print(f"  1. Run: ./start_bot.sh")
        print(f"  2. Or run: python3 telegram_translator_bot.py")
    
    print(f"\n{Colors.BLUE}Your bot is ready to translate! 🌐{Colors.END}")
    
    # Ask if user wants to start now
    response = input(f"\n{Colors.YELLOW}Start the bot now? (Y/n): {Colors.END}")
    if response.lower() != 'n':
        print(f"\n{Colors.GREEN}Starting bot...{Colors.END}")
        subprocess.call([sys.executable, "telegram_translator_bot.py"])

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}Setup cancelled by user{Colors.END}")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Colors.RED}Setup error: {e}{Colors.END}")
        sys.exit(1)